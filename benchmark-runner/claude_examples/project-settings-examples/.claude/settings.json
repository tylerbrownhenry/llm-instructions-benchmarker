{
  "project": {
    "name": "e-commerce-platform",
    "type": "full-stack",
    "framework": "next-node-postgres"
  },
  
  "permissions": {
    "allowTools": ["Read", "Write", "Edit", "Bash", "Glob", "Grep", "WebFetch"],
    "requireApproval": ["Bash:npm install", "Bash:docker"],
    "autoApprove": {
      "patterns": ["npm run *", "git add .", "git commit -m *"],
      "fileTypes": ["*.js", "*.ts", "*.jsx", "*.tsx", "*.json", "*.md"]
    }
  },
  
  "environment": {
    "NODE_ENV": "development",
    "DATABASE_URL": "postgresql://localhost:5432/ecommerce_dev",
    "REDIS_URL": "redis://localhost:6379",
    "API_BASE_URL": "http://localhost:3001"
  },
  
  "hooks": [
    {
      "event": "PostToolUse",
      "matcher": "Edit|Write",
      "command": "if [[ \"$CLAUDE_TOOL_INPUT_FILE_PATH\" == *.js || \"$CLAUDE_TOOL_INPUT_FILE_PATH\" == *.ts ]]; then npx eslint \"$CLAUDE_TOOL_INPUT_FILE_PATH\" --fix; fi"
    },
    {
      "event": "PostToolUse",
      "matcher": "Write|Edit",
      "command": "if [[ \"$CLAUDE_TOOL_INPUT_FILE_PATH\" == *test* || \"$CLAUDE_TOOL_INPUT_FILE_PATH\" == *spec* ]]; then npm test -- \"$CLAUDE_TOOL_INPUT_FILE_PATH\" --passWithNoTests; fi"
    },
    {
      "event": "PostToolUse",
      "matcher": "Edit",
      "command": "if [[ \"$CLAUDE_TOOL_INPUT_FILE_PATH\" == package.json ]]; then npm install; fi"
    },
    {
      "event": "PreToolUse",
      "matcher": "Bash:docker",
      "command": "echo \"Docker command detected - ensuring services are ready\" >> .claude/docker.log"
    }
  ],
  
  "agents": [
    {
      "name": "frontend-dev",
      "description": "Next.js frontend development specialist",
      "instructions": "Focus on React components, TypeScript, and responsive design. Use Tailwind CSS for styling. Ensure accessibility compliance.",
      "scope": ["src/pages/**", "src/components/**", "src/styles/**"],
      "tools": ["Read", "Write", "Edit", "Bash"],
      "concurrent": true
    },
    {
      "name": "backend-dev", 
      "description": "Node.js API development specialist",
      "instructions": "Build REST APIs with Express. Use PostgreSQL with Prisma ORM. Implement proper error handling and validation.",
      "scope": ["src/api/**", "src/lib/**", "prisma/**"],
      "tools": ["Read", "Write", "Edit", "Bash"],
      "concurrent": true
    },
    {
      "name": "database-admin",
      "description": "Database schema and migration specialist", 
      "instructions": "Manage database schema, write migrations, optimize queries. Ensure data integrity and performance.",
      "scope": ["prisma/**", "migrations/**"],
      "tools": ["Read", "Write", "Edit", "Bash"],
      "concurrent": false
    },
    {
      "name": "testing-specialist",
      "description": "Testing and quality assurance specialist",
      "instructions": "Write comprehensive tests using Jest and Testing Library. Focus on unit, integration, and e2e testing.",
      "scope": ["**/*.test.*", "**/*.spec.*", "tests/**"],
      "tools": ["Read", "Write", "Edit", "Bash"],
      "concurrent": false
    }
  ],
  
  "workflows": {
    "feature-development": {
      "description": "Full-stack feature development workflow",
      "agents": ["database-admin", "backend-dev", "frontend-dev", "testing-specialist"],
      "sequential": true,
      "steps": [
        {"agent": "database-admin", "task": "Update schema if needed"},
        {"agent": "backend-dev", "task": "Implement API endpoints"},
        {"agent": "frontend-dev", "task": "Build UI components"}, 
        {"agent": "testing-specialist", "task": "Add comprehensive tests"}
      ]
    },
    "bug-fix": {
      "description": "Bug investigation and resolution workflow",
      "agents": ["testing-specialist", "backend-dev", "frontend-dev"],
      "sequential": false,
      "parallel": true
    }
  },
  
  "testing": {
    "framework": "jest",
    "coverage": {
      "threshold": 80,
      "exclude": ["**/*.config.js", "**/*.stories.js"]
    },
    "e2e": {
      "framework": "playwright",
      "baseUrl": "http://localhost:3000"
    }
  },
  
  "build": {
    "commands": {
      "dev": "npm run dev",
      "build": "npm run build",
      "test": "npm test",
      "lint": "npm run lint",
      "deploy": "npm run build && npm run test:e2e"
    },
    "watch": ["src/**/*", "prisma/**/*"]
  },
  
  "integrations": {
    "git": {
      "hooks": {
        "pre-commit": ["npm run lint", "npm run test:changed"],
        "pre-push": ["npm run build", "npm run test:e2e"]
      }
    },
    "database": {
      "type": "postgresql",
      "orm": "prisma",
      "migrations": "auto"
    },
    "deployment": {
      "platform": "vercel",
      "environment": "preview",
      "database": "supabase"
    }
  }
}