{
  "project": {
    "name": "orchestrated-development",
    "type": "multi-agent-pipeline"
  },
  
  "agents": [
    {
      "name": "main-coordinator",
      "description": "Main orchestrating agent that spawns and coordinates child processes",
      "instructions": "Coordinate development tasks by spawning specialized child agents. Manage task dependencies and collect results.",
      "tools": ["Read", "Write", "Edit", "Bash", "Glob", "Grep"],
      "concurrent": false,
      "isMain": true,
      "childProcesses": {
        "enabled": true,
        "maxConcurrent": 5,
        "timeout": 300000
      }
    },
    {
      "name": "test-runner-agent",
      "description": "Specialized agent for running unit tests",
      "instructions": "Execute unit tests and report results. Focus on test execution, not test writing.",
      "tools": ["Read", "Bash"],
      "concurrent": true,
      "lifecycle": "persistent",
      "triggerPatterns": ["**/*.test.js", "**/*.spec.js", "**/*.test.ts", "**/*.spec.ts"]
    },
    {
      "name": "test-writer-agent", 
      "description": "Specialized agent for writing unit tests",
      "instructions": "Write comprehensive unit tests for JavaScript/TypeScript code. Use Jest and Testing Library patterns.",
      "tools": ["Read", "Write", "Edit"],
      "concurrent": true,
      "lifecycle": "task-based",
      "triggerPatterns": ["src/**/*.js", "src/**/*.ts", "src/**/*.jsx", "src/**/*.tsx"]
    },
    {
      "name": "linter-agent",
      "description": "Code linting and formatting specialist",
      "instructions": "Run ESLint, Prettier, and other code quality tools. Fix issues automatically when possible.",
      "tools": ["Read", "Write", "Edit", "Bash"],
      "concurrent": true,
      "lifecycle": "persistent",
      "triggerPatterns": ["**/*.js", "**/*.ts", "**/*.jsx", "**/*.tsx", "**/*.json"]
    },
    {
      "name": "docs-updater-agent",
      "description": "Documentation maintenance specialist",
      "instructions": "Update README, API docs, and inline documentation. Generate docs from code comments.",
      "tools": ["Read", "Write", "Edit", "Bash"],
      "concurrent": true,
      "lifecycle": "task-based",
      "triggerPatterns": ["src/**/*.js", "src/**/*.ts", "README.md", "docs/**/*"]
    },
    {
      "name": "log-reader-agent",
      "description": "Log file analysis specialist",
      "instructions": "Monitor and analyze log files. Extract errors, patterns, and insights.",
      "tools": ["Read", "Grep", "Bash"],
      "concurrent": true,
      "lifecycle": "persistent",
      "triggerPatterns": ["logs/**/*", "*.log"]
    },
    {
      "name": "log-writer-agent",
      "description": "Structured logging specialist", 
      "instructions": "Write structured logs and maintain log files. Ensure proper log rotation and formatting.",
      "tools": ["Write", "Bash"],
      "concurrent": true,
      "lifecycle": "persistent"
    }
  ],
  
  "hooks": [
    {
      "event": "PostToolUse",
      "matcher": "Edit|Write",
      "command": "node .claude/scripts/agent-orchestrator.js spawn --trigger=\"$CLAUDE_TOOL_INPUT_FILE_PATH\" --event=\"file_changed\""
    },
    {
      "event": "PreToolUse",
      "matcher": "Bash",
      "command": "node .claude/scripts/agent-orchestrator.js log --agent=\"main-coordinator\" --action=\"$CLAUDE_TOOL_INPUT_COMMAND\""
    },
    {
      "event": "Stop",
      "matcher": "*",
      "command": "node .claude/scripts/agent-orchestrator.js cleanup --session=\"$CLAUDE_SESSION_ID\""
    }
  ],
  
  "orchestration": {
    "taskQueue": {
      "enabled": true,
      "maxSize": 100,
      "priorityLevels": ["critical", "high", "normal", "low"]
    },
    "dependencies": {
      "test-runner-agent": ["linter-agent"],
      "docs-updater-agent": ["test-writer-agent"],
      "deployment": ["test-runner-agent", "linter-agent"]
    },
    "communication": {
      "method": "ipc",
      "channels": ["task-queue", "results", "logs", "errors"]
    },
    "monitoring": {
      "enabled": true,
      "metricsFile": ".claude/metrics.json",
      "logLevel": "info"
    }
  },
  
  "childProcessConfig": {
    "nodeOptions": ["--max-old-space-size=2048"],
    "environment": {
      "NODE_ENV": "development",
      "CLAUDE_CHILD_PROCESS": "true"
    },
    "stdio": "pipe",
    "timeout": 300000,
    "retries": 3
  }
}