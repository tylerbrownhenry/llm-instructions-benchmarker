{
  "project": {
    "name": "task-specialized-agents",
    "type": "multi-agent-development"
  },
  
  "agents": [
    {
      "name": "unit-test-runner",
      "description": "Specialized agent for running unit tests with detailed reporting",
      "instructions": "Execute unit tests using Jest, report results with coverage data, identify failing tests and suggest fixes.",
      "tools": ["Read", "Bash"],
      "scriptPath": ".claude/agents/unit-test-runner.js",
      "triggerPatterns": ["**/*.test.js", "**/*.spec.js", "**/*.test.ts", "**/*.spec.ts"],
      "concurrent": true,
      "priority": "high",
      "config": {
        "testFramework": "jest",
        "coverageThreshold": 80,
        "watchMode": false,
        "verbose": true
      }
    },
    {
      "name": "unit-test-writer",
      "description": "Specialized agent for writing comprehensive unit tests",
      "instructions": "Generate thorough unit tests for JavaScript/TypeScript functions and classes. Follow TDD principles and testing best practices.",
      "tools": ["Read", "Write", "Edit"],
      "scriptPath": ".claude/agents/unit-test-writer.js",
      "triggerPatterns": ["src/**/*.js", "src/**/*.ts", "lib/**/*.js", "lib/**/*.ts"],
      "concurrent": true,
      "priority": "medium",
      "config": {
        "testFramework": "jest",
        "testingLibrary": "@testing-library/react",
        "generateMocks": true,
        "testTypes": ["unit", "integration"]
      }
    },
    {
      "name": "eslint-enforcer",
      "description": "Specialized agent for ESLint code quality enforcement",
      "instructions": "Run ESLint with auto-fix capabilities, enforce coding standards, report violations with explanations.",
      "tools": ["Read", "Write", "Edit", "Bash"],
      "scriptPath": ".claude/agents/eslint-enforcer.js",
      "triggerPatterns": ["**/*.js", "**/*.ts", "**/*.jsx", "**/*.tsx"],
      "concurrent": true,
      "priority": "high",
      "config": {
        "autoFix": true,
        "configFile": ".eslintrc.js",
        "extensions": [".js", ".ts", ".jsx", ".tsx"],
        "ignorePatterns": ["node_modules", "dist", "build"]
      }
    },
    {
      "name": "documentation-maintainer",
      "description": "Specialized agent for maintaining and updating documentation",
      "instructions": "Generate API documentation, update README files, maintain inline comments, ensure documentation accuracy.",
      "tools": ["Read", "Write", "Edit", "Bash"],
      "scriptPath": ".claude/agents/documentation-maintainer.js",
      "triggerPatterns": ["src/**/*.js", "src/**/*.ts", "README.md", "docs/**/*", "*.md"],
      "concurrent": true,
      "priority": "low",
      "config": {
        "docTool": "typedoc",
        "outputDir": "docs",
        "includePrivate": false,
        "generateChangelog": true
      }
    },
    {
      "name": "log-analyzer",
      "description": "Specialized agent for reading and analyzing log files",
      "instructions": "Monitor log files for errors, patterns, and anomalies. Generate reports and alerts for critical issues.",
      "tools": ["Read", "Grep", "Bash"],
      "scriptPath": ".claude/agents/log-analyzer.js",
      "triggerPatterns": ["logs/**/*.log", "*.log"],
      "concurrent": true,
      "priority": "medium",
      "config": {
        "logFormats": ["json", "text", "combined"],
        "alertLevels": ["error", "fatal"],
        "retentionDays": 30
      }
    },
    {
      "name": "structured-logger",
      "description": "Specialized agent for writing structured log entries",
      "instructions": "Create structured log entries with proper formatting, levels, and metadata. Ensure log rotation and archival.",
      "tools": ["Write", "Bash"],
      "scriptPath": ".claude/agents/structured-logger.js",
      "concurrent": true,
      "priority": "low",
      "config": {
        "logFormat": "json",
        "logLevels": ["debug", "info", "warn", "error", "fatal"],
        "rotateSize": "10MB",
        "archiveOld": true
      }
    }
  ],
  
  "hooks": [
    {
      "event": "PostToolUse",
      "matcher": "Edit|Write",
      "command": "node .claude/task-dispatcher.js --file=\"$CLAUDE_TOOL_INPUT_FILE_PATH\" --event=\"file_modified\""
    },
    {
      "event": "PreToolUse",
      "matcher": "Bash",
      "command": "node .claude/agents/structured-logger.js --action=\"log\" --message=\"Command executed: $CLAUDE_TOOL_INPUT_COMMAND\" --level=\"info\""
    },
    {
      "event": "Stop",
      "matcher": "*",
      "command": "node .claude/task-dispatcher.js --event=\"session_end\" --cleanup=true"
    }
  ],
  
  "taskPipeline": {
    "enabled": true,
    "stages": [
      {
        "name": "code-quality",
        "agents": ["eslint-enforcer"],
        "blocking": true,
        "timeout": 30000
      },
      {
        "name": "test-generation",
        "agents": ["unit-test-writer"],
        "blocking": false,
        "timeout": 60000
      },
      {
        "name": "test-execution",
        "agents": ["unit-test-runner"],
        "blocking": true,
        "timeout": 120000,
        "dependsOn": ["code-quality"]
      },
      {
        "name": "documentation",
        "agents": ["documentation-maintainer"],
        "blocking": false,
        "timeout": 45000,
        "dependsOn": ["test-execution"]
      }
    ]
  },
  
  "monitoring": {
    "enabled": true,
    "metricsFile": ".claude/agent-metrics.json",
    "logFile": ".claude/agent-activity.log",
    "alertThresholds": {
      "testFailureRate": 0.1,
      "lintErrorCount": 50,
      "docCoverage": 0.8
    }
  }
}